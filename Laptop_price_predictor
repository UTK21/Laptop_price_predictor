# -*- coding: utf-8 -*-
"""
Created on Fri Jul 29 00:43:26 2022

@author: utkarsh
"""
import numpy as np
import pandas  as pd

df=pd.read_csv('laptop_data.csv')
#print(df.duplicated().sum())  to check duplicate rows

#print(df.isnull().sum())  to check null/missing values



df.drop(columns=['Unnamed: 0'],inplace=True)
#print(df.head(5))


#removing GB from RAM and changing its type
df['Ram']=df['Ram'].str.replace('GB','')
df['Ram']=df['Ram'].astype('int32')


#removing kg from weight and changing its type
df['Weight']=df['Weight'].str.replace('kg','')
df['Weight']=df['Weight'].astype('float32')
print(df.info())


import seaborn as sns
sns.displot(df['Price']); #shows more laptops with less prcice and less laptops with more price
#which means our data is skewed

#focusing on company names

df['Company'].value_counts().plot(kind='bar')
#will give us number of laptops from each company

#check avg price of each company which will prove company namee does affect the price
sns.barplot(x=df['Company'],y=df['Price'])

#focus on type of laptop
df['TypeName'].value_counts().plot(kind='bar')

#avg value of a type of laptop
sns.barplot(x=df['TypeName'],y=df['Price'])
#type of laptop also affects the price proven here

#focus on size of a laptop
#sns.displot(df['Inches'])
#sns.scatterplot(x=df['Inches'],y=df['Price'])
#size does affect the price but not strongly


#focus on resolution of a laptop

#print(df['ScreenResolution'].value_counts())

#touchscreen and IPS PANEL are some features given here
#which should be a seperate coloumn in the dataset so we will add that
#and the resolution has to beconstricted to the pixels only
#and not in wordss
df['Touchscreen']=df['ScreenResolution'].apply(lambda x:1 if 'Touchscreen' in x else 0 )
#print(df.Touchscreen)
df['Touchscreen'].value_counts().plot(kind='bar')

#sns.barplot(x=df['Touchscreen'], y=df['Price'])

#new col for IPS PANEL
df['Ips']=df['ScreenResolution'].apply(lambda x:1 if 'IPS' in x else 0 )
#print(df.sample(15))
#ips display does affect the price just as touch screen
#now extracting X resolution and Y resolution
new = df['ScreenResolution'].str.split('x',n=1,expand=True)
df['X_res'] = new[0]
df['Y_res'] = new[1]
df['X_res'] = df['X_res'].str.replace(',','').str.findall(r'(\d+\.?\d+)').apply(lambda x:x[0])
df['X_res'] = df['X_res'].astype('int')
df['Y_res'] = df['Y_res'].astype('int')

#print(df.corr()['Price'])
#now creating the final col pixels
#formula for pixels per inches
df['ppi']=(((df['X_res']**2+df['X_res']**2))**0.5/df['Inches']).astype('float')
#print(df.corr()['Price'])

df.drop(columns=['ScreenResolution'],inplace=True)
df.drop(columns=['Inches'],inplace=True)
df.drop(columns=['X_res'],inplace=True)
df.drop(columns=['Y_res'],inplace=True)


#focusing on cpu col
#print(df['Cpu'].value_counts())
df['Cpu Name']=df['Cpu'].apply(lambda x:" ".join(x.split ()[0:3])

def fetch_processor(text):
    pass fetch_processor(text):
    if text == 'Intel Core i7' or text == 'Intel Core i5' or text == 'Intel Core i3':
        return text
    else:
        if text.split()[0] == 'Intel':
            return 'Other Intel Processor'
        else:
            return 'AMD Processor










